name: Provisioning infrastructure and Deployment for renderer CloudRun


on: 
  push:
    branches:
      - feat-tf     
env:
  PROJECT_ID: ${{ secrets.CLOUD_RUN_PROJECT_ID }}
  GOOGLE_CREDENTIALS: ${{ secrets.GCP_SA }}  
  REPO_NAME: renderer
  RUN_REGION: europe-west1
  BUCKET_NAME: ${{ secrets.BUCKET_NAME }}
jobs:
  setup-build-deploy-cloudrun:
    name: "Setup, Build, and Deploy CloudRun- '${{github.ref}}'"
    runs-on: ubuntu-latest
    permissions:
      id-token: 'write'
      contents: 'read'
    steps:
    - name: Checkout
      uses: actions/checkout@v1
    - id: auth
      name: Authenticate to Google Cloud
      uses: google-github-actions/auth@main
      with:
        token_format: access_token
        # Value from Terraform output.
        workload_identity_provider: 'projects/1031827147042/locations/global/workloadIdentityPools/key-pool/providers/key-provider'
        service_account: 'pipeline@${{ env.PROJECT_ID }}.iam.gserviceaccount.com'
        access_token_lifetime: '300s'
    - name: List buckets in project
      run: |-
           output=$(curl -X GET -H "Authorization: Bearer ${{ steps.auth.outputs.access_token }}" \
             "https://storage.googleapis.com/storage/v1/b/$BUCKET_NAME")
           if ! echo $output | grep $BUCKET_NAME ;then
           cat > BUCKET.json << EOF
           {
               "name": "$BUCKET_NAME",
               "location": "$RUN_REGION",
               "storageClass": "STANDARD",
               "iamConfiguration": {
                 "uniformBucketLevelAccess": {
                 "enabled": true
             }
            }
           }
           EOF
           cat BUCKET.json;
           curl -X POST --data-binary @BUCKET.json \
            -H "Authorization: Bearer ${{ steps.auth.outputs.access_token }}" \
            -H "Content-Type: application/json" \
           "https://storage.googleapis.com/storage/v1/b?project=${{ env.PROJECT_ID }}"
           echo "BUCKET CREATED";
           fi           


    # Setup gcloud CLI  
#     - uses: google-github-actions/setup-gcloud@master
#       with:
#         service_account_key: ${{ secrets.GCP_SA }} 
#         export_default_credentials: true
#         project_id: ${{ env.PROJECT_ID }}   
    - uses: google-github-actions/setup-gcloud@master
      with:
        project_id: ${{ env.PROJECT_ID }} 
#     # Configure Workload Identity Federation via a credentials file.
    - id: 'authcred'
      name: 'Authenticate to Google Cloud'
      uses: google-github-actions/auth@main
      with:
        create_credentials_file: 'true'
        activate_credentials_file: 'true'
        workload_identity_provider: 'projects/1031827147042/locations/global/workloadIdentityPools/key-pool/providers/key-provider'
        service_account: 'pipeline@${{ env.PROJECT_ID }}.iam.gserviceaccount.com'

    # Authenticate using the created credentials file.
    - id: 'gcloud'
      name: 'gcloud'
      run: |-
         gcloud auth login --brief --cred-file="${{ steps.authcred.outputs.credentials_file_path }}"
         gcloud --quiet auth configure-docker
       
    - name: Build and tag image
      run: |-
        docker build . --tag gcr.io/${{ env.PROJECT_ID }}/${{ env.REPO_NAME }}:$GITHUB_SHA      
    - name: Push image to GCR
      run: |-
        docker push gcr.io/${{ env.PROJECT_ID }}/${{ env.REPO_NAME }}:$GITHUB_SHA
#     # Terraform remote state GCS
    - name: Setup Terraform
      uses: hashicorp/setup-terraform@v1
    - name: Terraform init
      id: init
      run: |-
        mv tf-scripts/gcp/service/cloudrun/backend.tf .
        terraform init  -backend-config="bucket=$BUCKET_NAME" -backend-config="prefix=dev"
      continue-on-error: false
      working-directory: ./tf-scripts
#       env:
#         GOOGLE_CREDENTIALS: ${{ env.GOOGLE_CREDENTIALS }}      
    - name: Terraform Plan
      id: plan
      run: |-
         terraform plan \
          -var="project_id=$PROJECT_ID" \
          -var="region=$RUN_REGION" \
          -var="zone=europe-west1-c" \
          -var="service_name=$REPO_NAME" \
          -var="docker_image=gcr.io/$PROJECT_ID/$REPO_NAME:$GITHUB_SHA" \
          -var="service_account_id=renderer" \
          -var="service_account_name=renderer" \
          -var="cloudrun_service_account=renderer@$PROJECT_ID.iam.gserviceaccount.com" \
          -var="invoker_member=allUsers" \
          -var="vendor=gcp" \
          -var="vendor_service=cloudrun" \
          -var-file=tf-scripts/gcp/service/api-resources/api.tfvars \
          -out=PLAN
      continue-on-error: false
      working-directory: ./tf-scripts
#       env:
#         GOOGLE_CREDENTIALS: ${{ env.GOOGLE_CREDENTIALS }}      
    - name: Terraform apply
      id: apply
      run: |-
        terraform apply PLAN
      continue-on-error: false
      working-directory: ./tf-scripts
#       env:
#         GOOGLE_CREDENTIALS: ${{ env.GOOGLE_CREDENTIALS }}      
